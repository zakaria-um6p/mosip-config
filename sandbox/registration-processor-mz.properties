dmz.ingress.base.url=https://uat2.mosip.net

# Database Host name
mosip.registration.processor.database.hostname=uat2.mosip.net

# Database Port
mosip.registration.processor.database.port=30090

registration.processor.zone=mz

#-----------Health checker--------------
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=info,health,refresh

#------packet-bio-dedupe-service--------
#Maximum abis records to be fetched at a time
registration.processor.abis.maxResults=30
#Dummy Tag for face in cbeff file
registration.processor.abis.targetFPIR=30
# supported 'byte' and 'text format
activemq.message.format=text
# Buffer time above the expiry for all queues to allow reprocessing (in seconds)
registration.processor.bio.dedupe.reprocess.buffer.time=900

# ---------DB connection---------------
#Driver name
javax.persistence.jdbc.driver=org.postgresql.Driver

# Database connection URL
javax.persistence.jdbc.url=jdbc:postgresql://${mosip.registration.processor.database.hostname}:${mosip.registration.processor.database.port}/mosip_regprc?currentSchema=regprc

javax.persistence.jdbc.user=regprcuser
# TODO: user cipher below
javax.persistence.jdbc.password=mosip123

#Hibernate properties
hibernate.hbm2ddl.auto=none
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.jdbc.lob.non_contextual_creation=true
hibernate.show_sql=false

#-----packet-manager----------
registration.processor.LANDING_ZONE = /mnt/regproc/landing

#Location to store the file which is consumed from the print and postal queue
registration.processor.PRINT_POSTAL_SERVICE=/home/ftp1/PRINIT_POSTAL_SERVICE

#-----packet-utility----------
# The known packet sources. Should be set as all fieldCategory present in idschema
# (NOTE : if fieldCategory is set as pvt then the source should be id)
registration.processor.sourcepackets=id,evidence,optional
# The mandatory default source packet.(In default configuration this is thd id packet)
packet.default.source=id
# the default schema field cagegory (ex - private)
schema.default.fieldCategory=pvt,none
# The IDSchemaVersion used to create packets in reg-proc
IDSchema.Version=0.1

#---------registration-processor-camel-bridge------------

#Url to cluster manager to enable this stage for joining the cluster in secure zone
cluster.manager.file.name=hazelcast_mz-mz.xml

#workel pool size to process multiple requests parallely 
worker.pool.size=10

#Route files corresponding to the secure flow
camel.secure.active.flows.file.names=registration-processor-camel-routes-new-mz.xml,registration-processor-camel-routes-update-mz.xml,registration-processor-camel-routes-activate-mz.xml,registration-processor-camel-routes-res-update-mz.xml,registration-processor-camel-routes-deactivate-mz.xml,registration-processor-camel-routes-lost-mz.xml,registration-processor-camel-routes-res-reprint-mz.xml

#-------------TOKEN GENERATION----------------
#Token generation request id
token.request.id=io.mosip.registration.processor
#Token generation app id
token.request.appid=regproc
#Token generation username
token.request.username=registrationprocessor
#Token generation password
token.request.password={cipher}AQABt4aBjlC2OxQNy04L3OtJm8KaTDwSJhV3lEpUh6xBM2xGVnY3M1DIeKGFAeBNfi6jH5qgj1KCUmFONLwSmfcrPx9m6MYXXQMYwyAeq13Msy1fcG1AtZQASKeLbuMCaRwinwdt7C/WYzvVVv47NojD+VmHHVTY3qBXJ4dwZ0/BqmUBPXyYrJPKTcdouxT76bgm5+fXXNcT7lciXgD1aCnWKziL5nDa6Y9dhc+ZPyM0d+I0JfS+emsByt7tWgcZukQkOEx8JWfcCR4eVpERYVa/ps/EAuQRXmxIvnr54GSCc/KKpwnYnjLtKIx/75I6pezBdKU/BBJG1syjQp9VQC9adSI5fdsn3ijkxJjC9TSIFJKDlTHqNCnJaxQXcSBWL4Y=
#Token generation version
token.request.version=1.0
#Token generation Client Id
token.request.clientId=mosip-regproc-client
#Token generation secret key
token.request.secretKey=abc123
#Token generation issuer url
# Token generation issuer url. NOTE: The url here must match the one mentioned in keycloak auth token, otherwise
# performance of system will be severly affected.

token.request.issuerUrl=${mosipbox.public.url}/keycloak/auth/realms/mosip

#--------Registration processor rest client API's--------------


#Audit Service
AUDIT=${mosip.keymanager.base.url}/v1/auditmanager/audits

#Auth Service
authmanager.base.url=${mosip.keymanager.base.url}
PASSWORDBASEDTOKENAPI=${authmanager.base.url}/v1/authmanager/authenticate/useridPwd
KEYBASEDTOKENAPI=${authmanager.base.url}/v1/authmanager/authenticate/clientidsecretkey
TOKENVALIDATE=${authmanager.base.url}/v1/authmanager/authorize/admin/validateToken
GETRIDFROMUSERID=${authmanager.base.url}/v1/authmanager/rid
INTERNALAUTH=${mosip.keymanager.base.url}/idauthentication/v1/internal/auth
GETINDIVIDUALIDFROMUSERID=${authmanager.base.url}/v1/authmanager/individualId
#Master Data Services
MASTER=${mosip.keymanager.base.url}/v1/masterdata
MACHINEHISTORY=${MASTER}/machineshistories
CENTERHISTORY=${MASTER}/registrationcentershistory
CENTERUSERMACHINEHISTORY=${MASTER}/getregistrationmachineusermappinghistory
REVERSEDATASYNC=${mosip.keymanager.base.url}/preregistration/v1/sync/consumedPreRegIds
CENTERDETAILS=${MASTER}/registrationcenters
MACHINEDETAILS=${MASTER}/machines
DEVICESHISTORIES=${MASTER}/deviceshistories
REGISTRATIONCENTERDEVICEHISTORY=${MASTER}/registrationcenterdevicehistory
REGISTRATIONCENTERTIMESTAMP=${MASTER}/registrationcenters/validate
GENDER=${MASTER}/gendertypes/validate
REGION=${MASTER}/locations/validate
CITY=${MASTER}/locations/validate
POSTALCODE=${MASTER}/locations/validate
PROVINCE=${MASTER}/locations/validate
USERDETAILS=${MASTER}/users
TEMPLATES=${MASTER}/templates
DEVICEVALIDATEHISTORY=${mosip.keymanager.base.url}/v1/partnermanager/deviceprovidermanagement/validate
#To get the idschema from masterdata db
IDSCHEMA=${MASTER}/idschema/latest

#ID Repository Services
IDREPOSITORY=${mosip.keymanager.base.url}/idrepository/v1/identity/
IDREPOGETIDBYUIN=${mosip.keymanager.base.url}/idrepository/v1/identity/idvid
UINGENERATOR=${mosip.keymanager.base.url}/v1/idgenerator/uin
RETRIEVEIDENTITYFROMRID=${mosip.keymanager.base.url}/idrepository/v1/identity/idvid
RETRIEVEIDENTITY=${mosip.keymanager.base.url}/idrepository/v1/identity/idvid
CREATEVID=${mosip.keymanager.base.url}/idrepository/v1/vid
GETUINBYVID=${mosip.keymanager.base.url}/idrepository/v1/idvid
CREDENTIALREQUEST=${mosip.keymanager.base.url}/v1/credentialrequest/requestgenerator
GETVIDSBYUIN=${mosip.keymanager.base.url}/idrepository/v1/uin

#Encrypt Services
ENCRYPTURL=${mosip.keymanager.base.url}/v1/keymanager/encrypt
ENCRYPTIONSERVICE=${mosip.keymanager.base.url}/v1/keymanager/publickey
PDFSIGN=${mosip.keymanager.base.url}/v1/keymanager/pdf/sign

#Digital Signature Service
DIGITALSIGNATURE=${mosip.keymanager.base.url}/v1/keymanager/sign

#Digital Signature Id
mosip.registration.processor.digital.signature.id=io.mosip.registration.processor

# Url from where packets need to be picked up DMZ (landing zone)
NGINXDMZURL=${dmz.ingress.base.url}/registrationprocessor/v1/dmzpacketserver

#--------Registration Processor Rest Client API's-----------
CRYPTOMANAGERDECRYPT=${mosip.keymanager.base.url}/v1/keymanager/decrypt

#External Service
EISERVICE=${mosip.keymanager.base.url}/registrationprocessor/v1/eis/registration-processor/external-integration-service/v1.0

#RID Generation Service
RIDGENERATION=${mosip.keymanager.base.url}/v1/ridgenerator/generate/rid

#Registration Processor Status Services
# We specify Ingress location for dmz which is any worker node and a ingress port
SYNCSERVICE=${dmz.ingress.base.url}/registrationprocessor/v1/registrationstatus/sync
PACKETRECEIVER=${dmz.ingress.base.url}/registrationprocessor/v1/packetreceiver/registrationpackets

#SMS and EMAIL notification services
SMSNOTIFIER=${mosip.keymanager.base.url}/v1/notifier/sms/send
EMAILNOTIFIER=${mosip.keymanager.base.url}/v1/notifier/email/send

PMS=${mosip.keymanager.base.url}/v1/policymanager/policies

#---------Registration Status---------

#Maximum retry count for packet
registration.processor.max.retry=10
#Registration Status Id
mosip.registration.processor.registration.status.id=mosip.registration.status
#Registration Sync Id
mosip.registration.processor.registration.sync.id=mosip.registration.sync
#Registration Transaction Id
mosip.registration.processor.registration.transaction.id=mosip.registration.transaction
#Registration Sync Version
mosip.registration.processor.sync.version=1.0
#Registration Status Version
mosip.registration.processor.registration.status.version=1.0
#Registration Transaction Version
mosip.registration.processor.transaction.version=1.0

#--------Demo Dedupe Stage---------
application.id=REGISTRATION
#Status for matched records in demo dedupe stage
registration.processor.demodedupe.manualverification.status=APPROVED
#configuration parameter to disable or enable Demographic Deduplication 
mosip.registration.processor.demographic.deduplication.enable=true
# this Config can be RedirectToManualVerification,MarkAsDemodedupeRejected,MarkAsDemodedupeSuccess when potential match found and biometric validation failed
mosip.regproc.demo.dedupe.invalid-biometrics-action=RedirectToManualVerification
# this Config can be RedirectToManualVerification,MarkAsDemodedupeRejected,MarkAsDemodedupeSuccess when potential match found and biometric validation failed for Infant
mosip.regproc.demo.dedupe.infant.invalid-biometrics-action=RedirectToManualVerification

#-----------Manual Verification Stage------------
#Manual verification assignment request Id
mosip.registration.processor.manual.verification.assignment.id=mosip.manual.verification.assignment
#Manual verification decision request Id
mosip.registration.processor.manual.verification.decision.id=mosip.manual.verification.decision
#Manual verification biometric request Id
mosip.registration.processor.manual.verification.biometric.id=mosip.manual.verification.biometric
#Manual verification demographic request Id
mosip.registration.processor.manual.verification.demographic.id=mosip.manual.verification.demographic
#Manual verification packetinfo request Id
mosip.registration.processor.manual.verification.packetinfo.id=mosip.manual.verification.packetinfo

#Manual verification queue message expiry in seconds, if given 0 then message will never expire
registration.processor.queue.manualverification.request.messageTTL=5400
# Buffer time above the expiry queue to allow reprocessing (in seconds)
registration.processor.manual.verification.reprocess.buffer.time=900

registration.processor.manual.adjudication.policy.id=mpolicy-default-adjudication
registration.processor.manual.adjudication.subscriber.id=mpartner-default-adjudication
registration.processor.manual.adjudication.json=registration-processor-abis.json
#packet.info.storage.service=registration-processor-packet-info-storage-service
packet.info.storage.service=*
config.server.file.storage.uri=${spring.cloud.config.uri}/${packet.info.storage.service}/${spring.profiles.active}/${spring.cloud.config.label}/


#--------OSI Validation Stage----------
#To enable or disable the Center working hour validation
mosip.workinghour.validation.required=true
#Applicant date of birth format
registration.processor.applicant.dob.format=yyyy/MM/dd
#Internal Auth request id
mosip.identity.auth.internal.requestid=mosip.identity.auth.internal
registration.processor.validate.introducer=true
mosip.kernel.device.validate.history.id=""
#UMC configuarble
mosip.registartion.processor.validateUMC=true
crypto.PrependThumbprint.enable=true
auth.PrependThumbprint.enable=false

#---------Packet Receiver Stage------------
#Maximum file size to be upload from packet receiver
registration.processor.max.file.size=5
#Packet receiver application version
mosip.registration.processor.application.version=1.0
#Request Date Time format
mosip.registration.processor.datetime.pattern=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
#Request Date Timezone
mosip.registration.processor.timezone=GMT
#Packet Receiver request Id
mosip.registration.processor.packet.id=mosip.registration.packet
#Request time grace period
mosip.registration.processor.grace.period=10800

#-----------Retry Stage-----------
registration.processor.wait.period=1

#----------Uin Generator Stage------------
#Idrepo create request Id
registration.processor.id.repo.create=mosip.id.create
#Idrepo read request Id
registration.processor.id.repo.read=mosip.id.read
#Idrepo update request Id
registration.processor.id.repo.update=mosip.id.update
#Idrepo vidType request Id
registration.processor.id.repo.vidType=Perpetual
#Idrepo generate request Id
registration.processor.id.repo.generate=mosip.vid.create
#Idrepo vid version
registration.processor.id.repo.vidVersion=v1
#Max retry count for packet reprocessing
mosip.regproc.uin.generator.idrepo-max-retry-count=3

#---------Virus Scanner Stage---------
#Virus scanner packet extension
registration.processor.packet.ext=.zip
#Virus scanner server host
mosip.kernel.virus-scanner.host=clamav
#Virus scanner port
mosip.kernel.virus-scanner.port=80
#Virus scanner application request id
registration.processor.application.id=REGISTRATION
registration.processor.rid.machineidsubstring=10

#---------Message Sender Stage----------------------
#Mapping Identity json to map with the applicant id json
registration.processor.identityjson=registration-processor-identity.json
#create text print text file
registration.processor.print.textfile=registration-processor-print-text-file.json
#Abis queue configuration json
registration.processor.abis.json=registration-processor-abis.json
#Demographic identity label
registration.processor.demographic.identity=identity
registration.processor.notification.emails=

#Email subjects for success & failure scenario
#Uin generated subject
registration.processor.uin.generated.subject=UIN Generated
#Duplicate Uin subject
registration.processor.duplicate.uin.subject=Registration Failed because you have already Registered
#Applicant re-register subject
registration.processor.reregister.subject=Re-Register because there was a Technical Issue
#Uin activated subject
registration.processor.uin.activated.subject=Uin is activated successfully
#Uin deactivated subject
registration.processor.uin.deactivated.subject=Uin is deactivated
#Uin details updated subject
registration.processor.updated.subject=UIN Details Updated

#MessageSender api id
mosip.regproc.message.sender.api.id=mosip.registration.processor.message.sender
#MessageSender api version
mosip.regproc.message.sender.api.version=1.0

#------------Queue-----------------------
#Queue username
registration.processor.queue.username=admin
#Queue Password
registration.processor.queue.password={cipher}ccc09bfa71877335cda0d835cf29715c2a4809780a06d58dcc373a92113a843c
#Queue Url
registration.processor.queue.url=tcp://activemq:80
#Type of the Queue
registration.processor.queue.typeOfQueue=ACTIVEMQ
#Print Service address
registration.processor.queue.address = print-service
#Post Service address
registration.processor.queue.printpostaladdress = postal-service

# Enable proxy postal service response for test environments where actual postal service wont be available
# IMPORTANT : This should always be set as false in actual production environment
registration.processor.enable.proxy.postalservice=true

#------------Packet Validator Stage-----------
#Attributes to be validated in master data validation
registration.processor.masterdata.validation.attributes = gender,region,province,city
registration.processor.validateSchema=true
registration.processor.validateFile=true
registration.processor.validateChecksum=true
registration.processor.validateApplicantDocument=true
registration.processor.validateMasterData=false
registration-processor.validatemandotary=true

registration.processor.document.category=idobject-document-category-mapping.json
registration.processor.applicant.type=applicanttype-document-mapping.json

#------------Packet Generator-----------------
#Audit request id for packet generator
registration.processor.audit.applicationId=PACGEN
#Audit request application name for packet generator
registration.processor.audit.applicationName=PACKET_GENERATOR
#Packet generator request id
mosip.registration.processor.registration.packetgenerator.id=mosip.registration.packetgenerator
#Uin Card RePrint request id
mosip.registration.processor.uincard.reprint.id = mosip.uincard.reprint
#Packet generator request version
mosip.registration.processor.packetgenerator.version=1.0
#resident update service id
mosip.registration.processor.resident.service.id=mosip.registration.update
#resident lost service id
mosip.registration.processor.lost.id=mosip.registration.lost


#-------------Printing Service--------------------
mosip.registration.processor.print.service.id=mosip.registration.print
#unmasked uin length
registration.processor.unMaskedUin.length=4
#UIN card password
mosip.registration.processor.print.service.uincard.password=postalCode|fullName
#header length to be removed from iso image to get actual image
mosip.print.uin.header.length=73
#Rectangle coordinates for pfd signataured data
mosip.registration.processor.print.service.uincard.lowerleftx=73
mosip.registration.processor.print.service.uincard.lowerlefty=100
mosip.registration.processor.print.service.uincard.upperrightx=300
mosip.registration.processor.print.service.uincard.upperrighty=300
mosip.registration.processor.print.service.uincard.signature.reason="signing"

#--------------Reprocessor stage----------------

#Number of the reprocess records to be fetched at a time
registration.processor.reprocess.fetchsize=100

# The reprocessor scheduler configurations
# The elapse time (in sec) beyond which the rids will be considered for reprocessing
registration.processor.reprocess.elapse.time=7200
# The maximum reprocess count. Beyond this the rid will not be considered for reprocessing.
registration.processor.reprocess.attempt.count=300
# Reprocess type
registration.processor.reprocess.type=cron
#schedular seconds configuration
registration.processor.reprocess.seconds=0
#schedular minutes configuration
registration.processor.reprocess.minutes=0
#schedular hours configuration
# Under assumption of about 2 hrs of downtime for regproc on daily basis, the reprocessor 
# frequency is made to 3 hours once
registration.processor.reprocess.hours=0,3,6,9,12,15,18,21
#schedular days configuration
registration.processor.reprocess.days_of_month=*
#schedular months configuration
registration.processor.reprocess.months=*
#schedular weeks configuration
registration.processor.reprocess.days_of_week=*


#Service Ids
#Audit request id
mosip.registration.processor.audit.id=mosip.applicanttype.getApplicantType
#Cryptomanager decrypt request id
mosip.registration.processor.crypto.decrypt.id=mosip.cryptomanager.decrypt
#SMS notification request id
mosip.registration.processor.sms.id=mosip.sms.send
#Email notification request id
mosip.registration.processor.email.id=mosip.email.send

#Kernel Crypto signature
registration.processor.signature.isEnabled=true

#BioDedupe stage
registration.processor.infant.dedupe=N

# ID Authentication 
IDAUTHENCRYPTION=${mosip.keymanager.base.url}/idauthentication/v1/internal/encrypt
IDAUTHPUBLICKEY=${mosip.keymanager.base.url}/idauthentication/v1/internal/publickey
IDAUTHCERTIFICATE=${mosip.keymanager.base.url}/idauthentication/v1/internal/getCertificate
ida-internal-auth-uri=${mosip.keymanager.base.url}/idauthentication/v1/internal/auth
ida-internal-get-certificate-uri=${mosip.keymanager.base.url}/idauthentication/v1/internal/getCertificate


registration.processor.objectstore.adapter.name=S3Adapter
packetmanager.base.url=${mosip.keymanager.base.url}/commons
PACKETMANAGER_SEARCH_FIELD=${packetmanager.base.url}/v1/packetmanager/searchField
PACKETMANAGER_SEARCH_FIELDS=${packetmanager.base.url}/v1/packetmanager/searchFields
PACKETMANAGER_SEARCH_METAINFO=${packetmanager.base.url}/v1/packetmanager/metaInfo
PACKETMANAGER_VALIDATE=${packetmanager.base.url}/v1/packetmanager/validatePacket
PACKETMANAGER_SEARCH_DOCUMENT=${packetmanager.base.url}/v1/packetmanager/document
PACKETMANAGER_SEARCH_BIOMETRICS=${packetmanager.base.url}/v1/packetmanager/biometrics
PACKETMANAGER_SEARCH_AUDITS=${packetmanager.base.url}/v1/packetmanager/audits
PACKETMANAGER_INFO=${packetmanager.base.url}/v1/packetmanager/info
PACKETMANAGER_UPDATE_TAGS=${packetmanager.base.url}/v1/packetmanager/addOrUpdateTag
DATASHARECREATEURL=${mosip.keymanager.base.url}/v1/datashare/create
DATASHAREGETEURL=${mosip.keymanager.base.url}/v1/datashare/get
registration.processor.policy.id=mpolicy-default-abis
registration.processor.subscriber.id=mpartner-default-abis


#iam adapter
mosip.auth.adapter.impl.basepackage=io.mosip.kernel.auth.defaultadapter

# BioSDK 
mosip.biometric.sdk.provider.finger.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
mosip.biometric.sdk.provider.iris.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
mosip.biometric.sdk.provider.face.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0

#--------------Print stage----------------
mosip.registration.processor.credentialtype=euin
mosip.registration.processor.encrypt=false
mosip.registration.processor.issuer=mpartner-default-print 
mosip.registration.processor.credential.request.service.id=mosip.credential.request.generator 

#---------------Stage common properties------------
#After this time intervel, message should be considered as expired (In seconds), 
#value as 0 and negative will disable message expiry checks
mosip.regproc.common.stage.message.expiry-time-limit=3600

#----------------------------------Event Bus------------------------------------------
#Supported eventbus types: vertx, kafka. Defaults to vertx if the config is not given
mosip.regproc.eventbus.type=kafka

#Kafka event bus config, will be used only when the type is kafka
#Kafka cluster servers comma separated, common for all stages and camel
mosip.regproc.eventbus.kafka.bootstrap.servers=localhost:9092

#securezone-notification-stage
#Supported commmit config: auto, batch, single
mosip.regproc.securezone.notification.eventbus.kafka.commit.type=single
#Maximum records that can be received in one poll to kafka
mosip.regproc.securezone.notification.eventbus.kafka.max.poll.records=100
#Interval between each poll calls to kafka in milli sec
mosip.regproc.securezone.notification.eventbus.kafka.poll.frequency=100
#kafka consumer group id, one unique id is required for for every stage
mosip.regproc.securezone.notification.eventbus.kafka.group.id=securezone-notification-stage
mosip.regproc.securezone.notification.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#camel-bridge
mosip.regproc.camel.bridge.eventbus.kafka.commit.type=single
mosip.regproc.camel.bridge.eventbus.kafka.max.poll.records=100
mosip.regproc.camel.bridge.eventbus.kafka.poll.frequency=100
#Above 3 camel kafka config will have no effect, it is kept because MosipBridgeFactory extends 
#MosipVerticleAPIManager
mosip.regproc.camel.bridge.eventbus.kafka.group.id=camel-brdige-mz
#packet-uploader-stage
mosip.regproc.packet.uploader.eventbus.kafka.commit.type=single
mosip.regproc.packet.uploader.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.uploader.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.uploader.eventbus.kafka.group.id=packet-uploader-stage
mosip.regproc.packet.uploader.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#packet-validator-stage
mosip.regproc.packet.validator.eventbus.kafka.commit.type=single
mosip.regproc.packet.validator.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.validator.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.validator.eventbus.kafka.group.id=packet-validator-stage
mosip.regproc.packet.validator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#packet-classifier-stage
mosip.regproc.packet.classifier.eventbus.kafka.commit.type=single
mosip.regproc.packet.classifier.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.classifier.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.classifier.eventbus.kafka.group.id=packet-classifier-stage
mosip.regproc.packet.classifier.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#quality-checker-stage
mosip.regproc.quality.checker.eventbus.kafka.commit.type=single
mosip.regproc.quality.checker.eventbus.kafka.max.poll.records=100
mosip.regproc.quality.checker.eventbus.kafka.poll.frequency=100
mosip.regproc.quality.checker.eventbus.kafka.group.id=quality-checker-stage
mosip.regproc.quality.checker.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#osi-validator-stage
mosip.regproc.osi.validator.eventbus.kafka.commit.type=single
mosip.regproc.osi.validator.eventbus.kafka.max.poll.records=100
mosip.regproc.osi.validator.eventbus.kafka.poll.frequency=100
mosip.regproc.osi.validator.eventbus.kafka.group.id=osi-validator-stage
mosip.regproc.osi.validator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#external-stage
mosip.regproc.external.eventbus.kafka.commit.type=single
mosip.regproc.external.eventbus.kafka.max.poll.records=100
mosip.regproc.external.eventbus.kafka.poll.frequency=100
mosip.regproc.external.eventbus.kafka.group.id=external-stage
mosip.regproc.external.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#demo-dedupe-stage
mosip.regproc.demo.dedupe.eventbus.kafka.commit.type=single
mosip.regproc.demo.dedupe.eventbus.kafka.max.poll.records=100
mosip.regproc.demo.dedupe.eventbus.kafka.poll.frequency=100
mosip.regproc.demo.dedupe.eventbus.kafka.group.id=demo-dedupe-stage
mosip.regproc.demo.dedupe.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}
mosip.regproc.demo.dedupe.trim-whitespaces.simpleType-value=false

#abis-handler-stage
mosip.regproc.abis.handler.eventbus.kafka.commit.type=single
mosip.regproc.abis.handler.eventbus.kafka.max.poll.records=100
mosip.regproc.abis.handler.eventbus.kafka.poll.frequency=100
mosip.regproc.abis.handler.eventbus.kafka.group.id=abis-handler-stage
mosip.regproc.abis.handler.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#bio-dedupe-stage
mosip.regproc.bio.dedupe.eventbus.kafka.commit.type=single
mosip.regproc.bio.dedupe.eventbus.kafka.max.poll.records=100
mosip.regproc.bio.dedupe.eventbus.kafka.poll.frequency=100
mosip.regproc.bio.dedupe.eventbus.kafka.group.id=bio-dedupe-stage
mosip.regproc.bio.dedupe.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#manual-verification-stage
mosip.regproc.manual.verification.eventbus.kafka.commit.type=single
mosip.regproc.manual.verification.eventbus.kafka.max.poll.records=100
mosip.regproc.manual.verification.eventbus.kafka.poll.frequency=100
mosip.regproc.manual.verification.eventbus.kafka.group.id=manual-verification-stage
mosip.regproc.manual.verification.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#uin-generator-stage
mosip.regproc.uin.generator.eventbus.kafka.commit.type=single
mosip.regproc.uin.generator.eventbus.kafka.max.poll.records=100
mosip.regproc.uin.generator.eventbus.kafka.poll.frequency=100
mosip.regproc.uin.generator.eventbus.kafka.group.id=uin-generator-stage
mosip.regproc.uin.generator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}
mosip.regproc.uin.generator.trim-whitespaces.simpleType-value=false

#abis-middle-ware-stage
mosip.regproc.abis.middleware.eventbus.kafka.commit.type=single
mosip.regproc.abis.middleware.eventbus.kafka.max.poll.records=100
mosip.regproc.abis.middleware.eventbus.kafka.poll.frequency=100
mosip.regproc.abis.middleware.eventbus.kafka.group.id=abis-middle-ware-stage
mosip.regproc.abis.middleware.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#biometric-authentication-stage
mosip.regproc.biometric.authentication.eventbus.kafka.commit.type=single
mosip.regproc.biometric.authentication.eventbus.kafka.max.poll.records=100
mosip.regproc.biometric.authentication.eventbus.kafka.poll.frequency=100
mosip.regproc.biometric.authentication.eventbus.kafka.group.id=biometric-authentication-stage
mosip.regproc.biometric.authentication.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#reprocessor-stage
mosip.regproc.reprocessor.eventbus.kafka.commit.type=single
mosip.regproc.reprocessor.eventbus.kafka.max.poll.records=100
mosip.regproc.reprocessor.eventbus.kafka.poll.frequency=100
mosip.regproc.reprocessor.eventbus.kafka.group.id=reprocessor-stage

#message-sender-stage
mosip.regproc.message.sender.eventbus.kafka.commit.type=single
mosip.regproc.message.sender.eventbus.kafka.max.poll.records=100
mosip.regproc.message.sender.eventbus.kafka.poll.frequency=100
mosip.regproc.message.sender.eventbus.kafka.group.id=message-sender-stage
mosip.regproc.message.sender.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#printing-stage
mosip.regproc.printing.eventbus.kafka.commit.type=single
mosip.regproc.printing.eventbus.kafka.max.poll.records=100
mosip.regproc.printing.eventbus.kafka.poll.frequency=100
mosip.regproc.printing.eventbus.kafka.group.id=printing-stage
mosip.regproc.printing.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#training-stage
mosip.regproc.training.eventbus.kafka.commit.type=single
mosip.regproc.training.eventbus.kafka.max.poll.records=100
mosip.regproc.training.eventbus.kafka.poll.frequency=100
mosip.regproc.training.eventbus.kafka.group.id=training-stage
mosip.regproc.training.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}


packetmanager.name.source.resident=RESIDENT
packetmanager.name.source.cnie=CNIE
packetmanager.name.source.default=REGISTRATION_CLIENT
object.store.s3.use.account.as.bucketname=true

# default priority for correction packets
# To define priority use below stage names. For example, field 'gender' has priority in uin-generator-stage. The key for uin-generator-stage is 'uingenerator'. So the key would be 'packetmanager.provider.uingenerator.gender'
# packetreceiver,packetuploader,packetvalidator,qualitychecker,osivalidator,demodedupe,classification,biodedupe,bioauth,manualverification,uingenerator,messagesender
packetmanager.provider.uingenerator.lastName=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.gender=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.city=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.modeOfClaim=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cregion=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.postalCode=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cprovince=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.suffix=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.bloodType=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.referenceIdentityNumber=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Finger]=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Iris]=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Face]=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.province=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine4=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.zone=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine3=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine2=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine1=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine1=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine2=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.residenceStatus=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine3=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine4=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.email=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.czone=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.dateOfBirth=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cpostalCode=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.ccity=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.firstName=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.IDSchemaVersion=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.phone=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.registrationType=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.middleName=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.UIN=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.region=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.maritalStatus=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.parentOrGuardianUIN=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.parentOrGuardianRID=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfAddress=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfDateOfBirth=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfIdentity=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfRelationship=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfException=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT

# packet-classifier-stage
# List of tag generator that should be run on every packet
# Available tag generators MosipIDObjectFields,MosipMetaInfo,MosipAgeGroup,MosipSupervisorApprovalStatus,MosipExceptionBiometrics
mosip.regproc.packet.classifier.tag-generators=MosipIDObjectFields,MosipMetaInfo,MosipAgeGroup,MosipSupervisorApprovalStatus,MosipExceptionBiometrics
# The tag value that will be used by default when the packet does not have value for the tag field
mosip.regproc.packet.classifier.tagging.not-available-tag-value=--TAG_VALUE_NOT_AVAILABLE--
# These field names should be as in keys of registraion-processor-identity.json file Identity segment
# and should have proper default source configured
mosip.regproc.packet.classifier.tagging.idobjectfields.mapping-field-names=gender,residenceStatus
# The tag name that will be prefixed with every idobjectfield tags
mosip.regproc.packet.classifier.tagging.idobjectfields.tag-name-prefix=ID_OBJECT-
# The tag name that will be prefixed with every metainfo operationsData tags
mosip.regproc.packet.classifier.tagging.metainfo.operationsdata.tag-name-prefix=META_INFO-OPERATIONS_DATA-
# The tag name that will be prefixed with every metainfo metaData tags
mosip.regproc.packet.classifier.tagging.metainfo.metadata.tag-name-prefix=META_INFO-META_DATA-
# The tag name that will be prefixed with every metainfo capturedRegisteredDevices tags 
mosip.regproc.packet.classifier.tagging.metainfo.capturedregistereddevices.tag-name-prefix=META_INFO-CAPTURED_REGISTERED_DEVICES-
# The labels on metainfo.operationsData array that needs to be tagged
mosip.regproc.packet.classifier.tagging.metainfo.operationsdata.tag-labels=officerId
# The labels on metainfo.metaData array that needs to be tagged
mosip.regproc.packet.classifier.tagging.metainfo.metadata.tag-labels=centerId
# The serial numbers of devices type on metainfo.capturedRegisteredDevices array that needs to be tagged
mosip.regproc.packet.classifier.tagging.metainfo.capturedregistereddevices.device-types=Face,Finger
# Tag name that will be used while tagging age group
mosip.regproc.packet.classifier.tagging.agegroup.tag-name=AGE_GROUP
# Below age ranges map should contain proper age group name and age range, any overlap of the age 
# range will result in a random behaviour of tagging. In range, upper and lower values are inclusive.
mosip.regproc.packet.classifier.tagging.agegroup.ranges={'CHILD':'0-17','ADULT':'18-59','SENIOR_CITIZEN':'60-200'}
# Tag name that will be used while tagging supervisor approval status
mosip.regproc.packet.classifier.tagging.supervisorapprovalstatus.tag-name=SUPERVISOR_APPROVAL_STATUS
# Tag name that will be used while tagging exception biometrics
mosip.regproc.packet.classifier.tagging.exceptionbiometrics.tag-name=EXCEPTION_BIOMETRICS
# This mapping will contain the short words for each missing biometrics, the values will used for concatenating in the tags
mosip.regproc.packet.classifier.tagging.exceptionbiometrics.bio-value-mapping={'leftLittle':'LL','leftRing':'LR','leftMiddle':'LM','leftIndex':'LI','leftThumb':'LT','rightLittle':'RL','rightRing':'RR','rightMiddle':'RM','rightIndex':'RI','rightThumb':'RT','leftEye':'LE','rightEye':'RE'}


## Mock Manual Verification Properties 
# Based on value of below parameter the packets are passed or rejected. Required values are [APPROVED or REJECTED]
mock.mv.decision=APPROVED

registration.processor.manual.adjudication.queue.username=${registration.processor.queue.username}
registration.processor.manual.adjudication.queue.password=${registration.processor.queue.password}
registration.processor.manual.adjudication.queue.url=${registration.processor.queue.url}
registration.processor.manual.adjudication.queue.typeOfQueue=${registration.processor.queue.typeOfQueue}
registration.processor.verification.queue.username=${registration.processor.queue.username}
registration.processor.verification.queue.password=${registration.processor.queue.password}
registration.processor.verification.queue.url=${registration.processor.queue.url}
registration.processor.queue.manual.adjudication.request=mosip-to-mv

registration.processor.queue.manual.adjudication.response=mv-to-mosip
registration.processor.queue.username=admin

mosip.regproc.message.sender.api.id=mosip.registration.processor.message.sender
#MessageSender api version
mosip.regproc.message.sender.api.version=1.0
